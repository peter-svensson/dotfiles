# AWS SSO
sso() {
    unset AWS_PROFILE
    export AWS_PROFILE=$1
    aws sts get-caller-identity &> /dev/null || aws sso login --profile $1 || (unset AWS_PROFILE && aws-sso-util configure profile --no-credential-process $1)
    aws-export-credentials --credentials-file-profile $1 || aws sso login --profile $1 && aws-export-credentials --credentials-file-profile $1
    sed -i '/aws_credentials_expiration/d' ${AWS_CONFIG_FILE:-~/.aws/config}
}

# AWS SSO completion
_sso() {
    local -a completions
    while IFS='\n' read -r comp; do
        if [ -n "$comp" ]; then
            completions+=${comp}
        fi
    done < <(grep '^\[.*\]$' ${AWS_CONFIG_FILE:-~/.aws/config} | sed 's/^\[profile \(.*\)\]$/\1/')
    IFS=\  compadd $(echo $completions[@])
}

compdef _sso sso

# Kind load
kind_load() {
    local DIR=$(pwd)
    while [ ! -z "$DIR" ] && [ ! -f "$DIR/.buildtools.yaml" ]; do
        DIR="${DIR%\/*}"
    done

    if [ -z "${DIR}" ]; then
        echo "No .buildtools.yaml file found"
        return
    fi

    local REGISTRY=$(yq e '.registry.*.url' ${DIR}/.buildtools.yaml)
    local CLUSTER=$(basename $(dirname $PWD))
    local NAME=${IMAGE_NAME:-$(basename $PWD)}
    local COMMIT=$(git rev-parse HEAD)

    kind load --name ${CLUSTER} docker-image ${REGISTRY}/${NAME}:${COMMIT}
}

deploy_local() {
    kind_load
    deploy local
}

bup() {
  local result file
  file="${HOME}/.local/share/Brewfile"

  echo "Checking Brewfile"
  result=$(brew bundle cleanup --file $file)
  if [[ $? != 0 ]]; then
    if [[ $(echo "${result}" | grep -c 'uninstall formulae') -gt 0 ]]; then
      echo "Missing installed dependencies in Brewfile ${file}"
      echo "Update before running again"
      echo "${result}"
      return
    else
      echo "Errors in Brewfile ${file}?"
      echo "Fix them and try again"
      return
    fi
  fi

  echo "Brewfile matches installation, updating packages"
  brew update && brew upgrade
  for cask in $(brew list --cask); do
    brew info --cask $cask --json=v2 \
    | jq -r "[.casks[].outdated,.casks[].installed,.casks[].version] \
    | @tsv" \
    | read outdated installed current && if [[ "$current" != "$installed" ]]; then
      echo "Upgrading $cask from $installed to $current"
      brew upgrade --cask --greedy $cask
    else
      echo "$cask:$current is latest version"
    fi
  done
}
